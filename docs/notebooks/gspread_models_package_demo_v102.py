# -*- coding: utf-8 -*-
"""gspread_models Package Demo (2024)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O6iOdXg-iemTXl_iRcwVy4tN36nNpCKz

### Package Installation

Package installation:
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# #!pip uninstall gspread_models
# !pip install gspread_models==1.0.2 # --upgrade

!pip list | grep gspread_models

"""### Google Credentials"""

from google.colab import auth

auth.authenticate_user()

from google.auth import default

creds, _ = default()
type(creds)

"""### Spreadsheet Service

Create a Google Sheets document with "books" sheet, with columns: `id`, `title`, `author`, `year`, and `created_at`. Note the document identifier, and set it as the `GSPREAD_MODELS_DOCUMENT_ID` notebook secret.
"""

from google.colab import userdata

GOOGLE_SHEETS_DOCUMENT_ID = userdata.get("GSPREAD_MODELS_DOCUMENT_ID")

"""Build a new service instance:"""

from gspread_models.service import SpreadsheetService

service = SpreadsheetService(creds=creds, document_id=GOOGLE_SHEETS_DOCUMENT_ID)

service.doc

for sheet in service.sheets:
    print(sheet.title)

"""### Binding the Model

Bind the base model with access to your account credentials and your document:
"""

from gspread_models.base import BaseModel

BaseModel.service = service
#BaseModel.set_document_id(GOOGLE_SHEETS_DOCUMENT_ID) # not necessary since we are binding at the service level

"""### Model Class

Now, defining custom class that inherits from the base model:
"""

class Book(BaseModel):

    SHEET_NAME = "books"

    COLUMNS = ["title", "author", "year"]

    SEEDS = [
        {"title": "To Kill a Mockingbird", "author": "Harper Lee", "year": 1960},
        {"title": "1984", "author": "George Orwell", "year": 1949},
        {"title": "The Great Gatsby", "author": "F. Scott Fitzgerald", "year": 1925},
        {"title": "The Catcher in the Rye", "author": "J.D. Salinger", "year": 1951},
        {"title": "Pride and Prejudice", "author": "Jane Austen", "year": 1813},
        {"title": "To the Lighthouse", "author": "Virginia Woolf", "year": 1927},
        {"title": "The Hobbit", "author": "J.R.R. Tolkien", "year": 1937},
        {"title": "Moby-Dick", "author": "Herman Melville", "year": 1851},
        {"title": "Brave New World", "author": "Aldous Huxley", "year": 1932},
        {"title": "Alice's Adventures in Wonderland", "author": "Lewis Carroll", "year": 1865},
        {"title": "Harry Potter and the Philosopher's Stone", "author": "J.K. Rowling", "year": 1997},
        {"title": "Harry Potter and the Chamber of Secrets", "author": "J.K. Rowling", "year": 1998},
    ]

"""### Queries

Destroy all records:
"""

Book.destroy_all()

"""Populate sheet with default records:"""

Book.seed()

"""Fetch all records from the sheet:"""

books = Book.all()
len(books)

for book in books:
    print(book.id, book.title, book.author, sep=" | ")
    # book.created_at.strftime("%Y-%m-%d")

"""Find record by id:"""

book = Book.find(3)
dict(book)

"""Filter records on matching conditions:

"""

book = Book.where(author="F. Scott Fitzgerald")[0]
dict(book)

hp_books = Book.where(author="J.K. Rowling")
for book in hp_books:
    print(book.id, book.title, book.author, sep=" | ")