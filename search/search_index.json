{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"API/","title":"Documentation for <code>gspread-models</code> Package","text":"<p>Mixin for date parsing / interfacing with google sheets date formatting.</p> Source code in <code>gspread_models/date_parser.py</code> <pre><code>class DateParser:\n    \"\"\"Mixin for date parsing / interfacing with google sheets date formatting.\"\"\"\n\n    @staticmethod\n    def generate_timestamp():\n        \"\"\"Generates a new timestamp of the current time in UTC timezone.\n            Returns a datetime object.\n        \"\"\"\n        return datetime.now(tz=timezone.utc)\n\n    @staticmethod\n    def parse_timestamp(ts:str) -&gt; datetime:\n        \"\"\"Converts a timestamp string to a datetime object as necessary.\n            Ensures you are working with a datetime object.\n\n            Params:\n                ts (str) : a timestamp string in format provided by google sheets\n\n            Example: DateParser.parse_timestamp('2023-03-08 19:59:16.471152+00:00')\n\n            Returns a datetime object.\n        \"\"\"\n        if isinstance(ts, datetime):\n            return ts\n        elif isinstance(ts, str):\n            return datetime.strptime(ts, DATE_FORMAT)\n        #else:\n        #    # something went wrong! use original value. consider raising error\n        #    return ts\n\n    @staticmethod\n    def validate_timestamp(ts:str):\n        try:\n            datetime.strptime(ts, DATE_FORMAT)\n            return True\n        except:\n            return False\n</code></pre> <p>             Bases: <code>DateParser</code></p> Source code in <code>gspread_models/service.py</code> <pre><code>class SpreadsheetService(DateParser):\n\n    def __init__(self, credentials_filepath=GOOGLE_CREDENTIALS_FILEPATH, document_id=GOOGLE_SHEETS_DOCUMENT_ID, creds=None):\n        \"\"\"Params:\n            Optionally pass creds (google.auth.compute_engine.credentials.Credentials) for example for use in colab notebook:\n\n                    from google.colab import auth\n                    from google.auth import default\n\n                    auth.authenticate_user()\n                    creds, _ = default()\n\n                    service = SpreadsheetService(creds=creds)\n        \"\"\"\n        if creds:\n            self.client = authorize(creds)\n        else:\n            self.client = service_account(filename=credentials_filepath)\n\n        self.document_id = document_id\n\n        print(\"SPREADSHEET SERVICE...\")\n        print(\"DOCUMENT ID:\", self.document_id)\n\n    @cached_property\n    def doc(self):\n        \"\"\"Get the given document. NOTE: this will make an API call.\"\"\"\n        return self.client.open_by_key(self.document_id) #&gt; &lt;class 'gspread.models.Spreadsheet'&gt;\n\n    @property\n    def sheets(self) -&gt; List[Worksheet]:\n        \"\"\"List all sheets in the given document.\"\"\"\n        return self.doc.worksheets()\n\n    def get_sheet(self, sheet_name) -&gt; Worksheet:\n        \"\"\"Get a specific sheet in the document.\"\"\"\n        return self.doc.worksheet(sheet_name)\n\n    def find_or_create_sheet(self, sheet_name) -&gt; Worksheet:\n        \"\"\"access a sheet within the document, or create if not exists\"\"\"\n        try:\n            sheet = self.doc.worksheet(sheet_name)\n            print(f\"FOUND SHEET: '{sheet_name}'\")\n        except WorksheetNotFound:\n            print(f\"CREATING NEW SHEET ('{sheet_name}')...\")\n            sheet = self.doc.add_worksheet(title=sheet_name, rows=\"3\", cols=\"3\") # rows and cols are required. can be overwritten later?\n            # consider adding columns based on self.COLUMNS\n        return sheet\n</code></pre>"},{"location":"API/#gspread_models.base.BaseModel.set_document_id","title":"<code>set_document_id(document_id)</code>  <code>classmethod</code>","text":""},{"location":"API/#gspread_models.base.BaseModel.get_sheet","title":"<code>get_sheet()</code>  <code>classmethod</code>","text":""},{"location":"API/#gspread_models.base.BaseModel.find","title":"<code>find(by_id, sheet=None)</code>  <code>classmethod</code>","text":"<p>Fetches a record by its unique identifier.</p>"},{"location":"API/#gspread_models.base.BaseModel.all","title":"<code>all(sheet=None)</code>  <code>classmethod</code>","text":"<p>Fetches all records from a given sheet.</p>"},{"location":"API/#gspread_models.base.BaseModel.destroy_all","title":"<code>destroy_all(sheet=None)</code>  <code>classmethod</code>","text":"<p>Removes all records from a given sheet, except the header row.</p>"},{"location":"API/#gspread_models.base.BaseModel.where","title":"<code>where(**kwargs)</code>  <code>classmethod</code>","text":"<p>Filter records which match all provided values.</p>"},{"location":"API/#gspread_models.base.BaseModel.create_all","title":"<code>create_all(new_records, records=[])</code>  <code>classmethod</code>","text":"<p>Appends new records (list of dictionaries) to the sheet. Adds auto-incrementing unique identifiers, and timestamp columns.</p>"},{"location":"API/#gspread_models.base.BaseModel.create","title":"<code>create(new_record)</code>  <code>classmethod</code>","text":"<p>Appends new records (list of dictionaries) to the sheet. Adds auto-incrementing unique identifiers, and timestamp columns.</p>"},{"location":"API/#gspread_models.date_parser.DateParser.generate_timestamp","title":"<code>generate_timestamp()</code>  <code>staticmethod</code>","text":"<p>Generates a new timestamp of the current time in UTC timezone. Returns a datetime object.</p> Source code in <code>gspread_models/date_parser.py</code> <pre><code>@staticmethod\ndef generate_timestamp():\n    \"\"\"Generates a new timestamp of the current time in UTC timezone.\n        Returns a datetime object.\n    \"\"\"\n    return datetime.now(tz=timezone.utc)\n</code></pre>"},{"location":"API/#gspread_models.date_parser.DateParser.parse_timestamp","title":"<code>parse_timestamp(ts)</code>  <code>staticmethod</code>","text":"<p>Converts a timestamp string to a datetime object as necessary. Ensures you are working with a datetime object.</p> <p>Parameters:</p> Name Type Description Default <code>ts</code> <code>str) </code> <p>a timestamp string in format provided by google sheets</p> required <p>Example: DateParser.parse_timestamp('2023-03-08 19:59:16.471152+00:00')</p> <p>Returns a datetime object.</p> Source code in <code>gspread_models/date_parser.py</code> <pre><code>@staticmethod\ndef parse_timestamp(ts:str) -&gt; datetime:\n    \"\"\"Converts a timestamp string to a datetime object as necessary.\n        Ensures you are working with a datetime object.\n\n        Params:\n            ts (str) : a timestamp string in format provided by google sheets\n\n        Example: DateParser.parse_timestamp('2023-03-08 19:59:16.471152+00:00')\n\n        Returns a datetime object.\n    \"\"\"\n    if isinstance(ts, datetime):\n        return ts\n    elif isinstance(ts, str):\n        return datetime.strptime(ts, DATE_FORMAT)\n</code></pre>"},{"location":"API/#gspread_models.service.SpreadsheetService.doc","title":"<code>doc</code>  <code>cached</code> <code>property</code>","text":"<p>Get the given document. NOTE: this will make an API call.</p>"},{"location":"API/#gspread_models.service.SpreadsheetService.sheets","title":"<code>sheets: List[Worksheet]</code>  <code>property</code>","text":"<p>List all sheets in the given document.</p>"},{"location":"API/#gspread_models.service.SpreadsheetService.__init__","title":"<code>__init__(credentials_filepath=GOOGLE_CREDENTIALS_FILEPATH, document_id=GOOGLE_SHEETS_DOCUMENT_ID, creds=None)</code>","text":"<p>Params: Optionally pass creds (google.auth.compute_engine.credentials.Credentials) for example for use in colab notebook:</p> <pre><code>    from google.colab import auth\n    from google.auth import default\n\n    auth.authenticate_user()\n    creds, _ = default()\n\n    service = SpreadsheetService(creds=creds)\n</code></pre> Source code in <code>gspread_models/service.py</code> <pre><code>def __init__(self, credentials_filepath=GOOGLE_CREDENTIALS_FILEPATH, document_id=GOOGLE_SHEETS_DOCUMENT_ID, creds=None):\n    \"\"\"Params:\n        Optionally pass creds (google.auth.compute_engine.credentials.Credentials) for example for use in colab notebook:\n\n                from google.colab import auth\n                from google.auth import default\n\n                auth.authenticate_user()\n                creds, _ = default()\n\n                service = SpreadsheetService(creds=creds)\n    \"\"\"\n    if creds:\n        self.client = authorize(creds)\n    else:\n        self.client = service_account(filename=credentials_filepath)\n\n    self.document_id = document_id\n\n    print(\"SPREADSHEET SERVICE...\")\n    print(\"DOCUMENT ID:\", self.document_id)\n</code></pre>"},{"location":"API/#gspread_models.service.SpreadsheetService.find_or_create_sheet","title":"<code>find_or_create_sheet(sheet_name)</code>","text":"<p>access a sheet within the document, or create if not exists</p> Source code in <code>gspread_models/service.py</code> <pre><code>def find_or_create_sheet(self, sheet_name) -&gt; Worksheet:\n    \"\"\"access a sheet within the document, or create if not exists\"\"\"\n    try:\n        sheet = self.doc.worksheet(sheet_name)\n        print(f\"FOUND SHEET: '{sheet_name}'\")\n    except WorksheetNotFound:\n        print(f\"CREATING NEW SHEET ('{sheet_name}')...\")\n        sheet = self.doc.add_worksheet(title=sheet_name, rows=\"3\", cols=\"3\") # rows and cols are required. can be overwritten later?\n        # consider adding columns based on self.COLUMNS\n    return sheet\n</code></pre>"},{"location":"API/#gspread_models.service.SpreadsheetService.get_sheet","title":"<code>get_sheet(sheet_name)</code>","text":"<p>Get a specific sheet in the document.</p> Source code in <code>gspread_models/service.py</code> <pre><code>def get_sheet(self, sheet_name) -&gt; Worksheet:\n    \"\"\"Get a specific sheet in the document.\"\"\"\n    return self.doc.worksheet(sheet_name)\n</code></pre>"}]}